.btn {
  @apply cursor-pointer tracking-widest;
  @apply select-none whitespace-nowrap;
  @apply text-content uppercase;
  @apply btn-md;

  animation: button-pop 0.25s ease-out;

  &:hover:active,
  &:focus:active {
    animation: none;
    transform: scale(0.95);
  }

  &-primary {
    @apply text-white;
    @apply dark:text-tertiary;

    background: $kicksite-yellow;

    &:hover,
    &:focus-visible {
      background: lighten($kicksite-yellow, 0.1);
    }

    &.disabled,
    &[disabled] {
      background: $kicksite-yellow;
    }
  }

  &-default {
    background: darken(white, 0.1);
    /*
      TODO: I think the best way to actually do this is to use the utilities to define
      the variables of all of the colors, in a sort of similar way to _palette.scss
      But with more semantic names and with less of the intent of the variables actually
      being reused. If we do it this way then we can do things like
      dark:default-dark-bg, which makes the actual component files a bit smaller
      and should allow postcss to still dump those out in the final CSS.
    */
    @apply dark:text-content dark:bg-[darken(white, 1)];

    &:hover,
    &:focus-visible {
      background: darken(white, 0.2);
    }

    &.disabled,
    &[disabled] {
      background: darken(white, 0.1);
    }
  }

  &.disabled,
  &[disabled] {
    @apply opacity-[0.65] cursor-not-allowed;
  }
}

@keyframes button-pop {
  0% {
    transform: scale(0.95);
  }

  40% {
    transform: scale(1.05);
  }

  100% {
    transform: scale(1);
  }
}
